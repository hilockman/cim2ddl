#pragma once

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_ElectronicTransformer_	{
	PG_ELECTRONICTRANSFORMER_RESOURCEID=0,
	PG_ELECTRONICTRANSFORMER_SUBSTATION,
	PG_ELECTRONICTRANSFORMER_NAME,
	PG_ELECTRONICTRANSFORMER_DESC,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERNUM,
	PG_ELECTRONICTRANSFORMER_DDCONVERTERNUM,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELACH,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELACL1,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELACL2,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELDCL1,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELDCL2,
	PG_ELECTRONICTRANSFORMER_VOLTAGELEVELDCT,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERH,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERL1,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERL2,
	PG_ELECTRONICTRANSFORMER_DDCONVERTERL1,
	PG_ELECTRONICTRANSFORMER_DDCONVERTERL2,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEACH,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEACL1,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEACL2,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEDCL1,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEDCL2,
	PG_ELECTRONICTRANSFORMER_CONNECTIVITYNODEDCT,

	PG_ELECTRONICTRANSFORMER_RI_RERR,		
	PG_ELECTRONICTRANSFORMER_RI_TREP,		
	PG_ELECTRONICTRANSFORMER_RI_RCHK,		
	PG_ELECTRONICTRANSFORMER_RI_TCHK,		
	PG_ELECTRONICTRANSFORMER_RI_TFLOC,		
	PG_ELECTRONICTRANSFORMER_EI_INVEST,	
	PG_ELECTRONICTRANSFORMER_RO_RCONTRIBUTION,	
	PG_ELECTRONICTRANSFORMER_RO_UCONTRIBUTION,	
	PG_ELECTRONICTRANSFORMER_RO_ENSCONTRIBUTION,

	PG_ELECTRONICTRANSFORMER_VOLTACHPTR,
	PG_ELECTRONICTRANSFORMER_VOLTACL1PTR,
	PG_ELECTRONICTRANSFORMER_VOLTACL2PTR,
	PG_ELECTRONICTRANSFORMER_VOLTDCL1PTR,
	PG_ELECTRONICTRANSFORMER_VOLTDCL2PTR,
	PG_ELECTRONICTRANSFORMER_VOLTDCTPTR,

	PG_ELECTRONICTRANSFORMER_ADCONVERTERHPTR,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERL1PTR,
	PG_ELECTRONICTRANSFORMER_ADCONVERTERL2PTR,
	PG_ELECTRONICTRANSFORMER_DDCONVERTERL1PTR,
	PG_ELECTRONICTRANSFORMER_DDCONVERTERL2PTR,

	PG_ELECTRONICTRANSFORMER_NODEACHPTR,
	PG_ELECTRONICTRANSFORMER_NODEACL1PTR,
	PG_ELECTRONICTRANSFORMER_NODEACL2PTR,
	PG_ELECTRONICTRANSFORMER_NODEDCL1PTR,
	PG_ELECTRONICTRANSFORMER_NODEDCL2PTR,
	PG_ELECTRONICTRANSFORMER_NODEDCTPTR,
};
struct	_PG_ElectronicTransformer_	{
	char	szResID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	unsigned char	nADConverterNum;
	unsigned char	nDDConverterNum;
	char	szVoltACH[MDB_CHARLEN_SHORTER];
	char	szVoltACL1[MDB_CHARLEN_SHORTER];
	char	szVoltACL2[MDB_CHARLEN_SHORTER];
	char	szVoltDCL1[MDB_CHARLEN_SHORTER];
	char	szVoltDCL2[MDB_CHARLEN_SHORTER];
	char	szVoltDCT[MDB_CHARLEN_SHORTER];
	char	szADConverterH[MDB_CHARLEN];
	char	szADConverterL1[MDB_CHARLEN];
	char	szADConverterL2[MDB_CHARLEN];
	char	szDDConverterL1[MDB_CHARLEN];
	char	szDDConverterL2[MDB_CHARLEN];
	char	szNodeACH[PGND_CHARLEN];
	char	szNodeACL1[PGND_CHARLEN];
	char	szNodeACL2[PGND_CHARLEN];
	char	szNodeDCL1[PGND_CHARLEN];
	char	szNodeDCL2[PGND_CHARLEN];
	char	szNodeDCT[PGND_CHARLEN];
	float	ri_Rerr;
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	float	ei_Invest;
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	short	nVoltACH;
	short	nVoltACL1;
	short	nVoltACL2;
	short	nVoltDCL1;
	short	nVoltDCL2;
	short	nVoltDCT;
	short	nADConverterH;
	short	nADConverterL1;
	short	nADConverterL2;
	short	nDDConverterL1;
	short	nDDConverterL2;
	int		nNodeACH;
	int		nNodeACL1;
	int		nNodeACL2;
	int		nNodeDCL1;
	int		nNodeDCL2;
	int		nNodeDCT;
}	DISALIGN;
typedef	struct	_PG_ElectronicTransformer_	tagPGElectronicTransformer;

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_DCBusbarSection_	{
	PG_DCBUSBARSECTION_RESOURCEID=0,
	PG_DCBUSBARSECTION_OBJECTID,
	PG_DCBUSBARSECTION_SUBSTATION,
	PG_DCBUSBARSECTION_VOLTAGELEVEL,
	PG_DCBUSBARSECTION_NAME,
	PG_DCBUSBARSECTION_DESC,
	//PG_DCBUSBARSECTION_TERMINAL,
	PG_DCBUSBARSECTION_CONNECTIVITYNODE,
	PG_DCBUSBARSECTION_V,
	PG_DCBUSBARSECTION_VLIMITL,
	PG_DCBUSBARSECTION_VLIMITH,
	PG_DCBUSBARSECTION_EFERENCEV,
	PG_DCBUSBARSECTION_RI_RERR,
	PG_DCBUSBARSECTION_RI_TREP,
	PG_DCBUSBARSECTION_RI_RCHK,
	PG_DCBUSBARSECTION_RI_TCHK,
	PG_DCBUSBARSECTION_RI_TFLOC,
	PG_DCBUSBARSECTION_EI_INVEST,
	PG_DCBUSBARSECTION_RO_RCONTRIBUTION,	
	PG_DCBUSBARSECTION_RO_UCONTRIBUTION,	
	PG_DCBUSBARSECTION_RO_ENSCONTRIBUTION,
	PG_DCBUSBARSECTION_NODEPTR,
	PG_DCBUSBARSECTION_TOPOBUS,
	PG_DCBUSBARSECTION_ISLAND,
	PG_DCBUSBARSECTION_OPEN,
};
struct	_PG_DCBusbarSection_	{
	char	szResID[MDB_CHARLEN];
	char	szObjID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szVolt[MDB_CHARLEN_SHORTER];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	//char	szTerminal[PGND_CHARLEN];
	char	szNode[PGND_CHARLEN];
	float	fV;
	float	fVLimitL;
	float	fVLimitH;
	float	fReferenceV;
	float	ri_Rerr;
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	float	ei_Invest;	//	经济性输入数据
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	int		nNode;
	int		nTopoBus;
	short	nIsland;
	unsigned char	bOpen;
}	DISALIGN;
typedef	struct	_PG_DCBusbarSection_	tagPGDCBusbarSection;

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_ACDCConverter_	{
	PG_ACDCCONVERTER_RESOURCEID=0,
	PG_ACDCCONVERTER_SUBSTATION,
	PG_ACDCCONVERTER_NAME,
	PG_ACDCCONVERTER_DESC,
	PG_ACDCCONVERTER_VOLTAGELEVELAC,
	PG_ACDCCONVERTER_VOLTAGELEVELDC,
	PG_ACDCCONVERTER_ECTRICTRANSFORMER,
	PG_ACDCCONVERTER_ISOLATOR,
	//PG_ACDCCONVERTER_TERMINALAC,
	//PG_ACDCCONVERTER_TERMINALDC,
	PG_ACDCCONVERTER_CONNECTIVITYNODEAC,
	PG_ACDCCONVERTER_CONNECTIVITYNODEDC,
	PG_ACDCCONVERTER_RATEDPOWER,
	PG_ACDCCONVERTER_MINQ,
	PG_ACDCCONVERTER_MAXQ,
	PG_ACDCCONVERTER_DCCONTROLMODE,
	PG_ACDCCONVERTER_DCCONTROLVALUE,
	PG_ACDCCONVERTER_CONTROLVAC,
	PG_ACDCCONVERTER_LOSSPARAMA,
	PG_ACDCCONVERTER_LOSSPARAMB,
	PG_ACDCCONVERTER_LOSSPARAMC,
	PG_ACDCCONVERTER_RI_RERR,
	PG_ACDCCONVERTER_RI_TREP,
	PG_ACDCCONVERTER_RI_RCHK,
	PG_ACDCCONVERTER_RI_TCHK,
	PG_ACDCCONVERTER_RI_TFLOC,
	PG_ACDCCONVERTER_RI_DIRECTION,
	PG_ACDCCONVERTER_EI_INVEST,
	PG_ACDCCONVERTER_MCRTYPEAC,
	PG_ACDCCONVERTER_MCRTYPEDC,
	PG_ACDCCONVERTER_MCRPOWER,
	PG_ACDCCONVERTER_VAC,
	PG_ACDCCONVERTER_PAC,
	PG_ACDCCONVERTER_QAC,
	PG_ACDCCONVERTER_AAC,
	PG_ACDCCONVERTER_VDC,
	PG_ACDCCONVERTER_PDC,
	PG_ACDCCONVERTER_ADC,
	PG_ACDCCONVERTER_LOSS,
	PG_ACDCCONVERTER_RO_RCONTRIBUTION,	
	PG_ACDCCONVERTER_RO_UCONTRIBUTION,	
	PG_ACDCCONVERTER_RO_ENSCONTRIBUTION,
	PG_ACDCCONVERTER_CALCULATEPAC,
	PG_ACDCCONVERTER_CALCULATEQAC,
	PG_ACDCCONVERTER_VOLTACPTR,
	PG_ACDCCONVERTER_VOLTDCPTR,
	PG_ACDCCONVERTER_NODEACPTR,
	PG_ACDCCONVERTER_NODEDCPTR,
	PG_ACDCCONVERTER_TOPOBUSIAC,
	PG_ACDCCONVERTER_TOPOBUSIDC,
	PG_ACDCCONVERTER_ISLANDAC,
	PG_ACDCCONVERTER_ISLANDDC,
	PG_ACDCCONVERTER_EDGEAC,
	PG_ACDCCONVERTER_EDGEDC,
	PG_ACDCCONVERTER_PSTATEAC,
	PG_ACDCCONVERTER_PSTATEDC,
	PG_ACDCCONVERTER_TYPE,
	PG_ACDCCONVERTER_OPEN,
	PG_ACDCCONVERTER_OUTAGE,
};
struct	_PG_ACDCConverter_	{
	char	szResID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	char	szVoltAC[MDB_CHARLEN_SHORTER];
	char	szVoltDC[MDB_CHARLEN_SHORTER];
	char	szElectronicTransformer[MDB_CHARLEN];
	unsigned char	bIsolator;
	//char	szTerminalAC[PGND_CHARLEN];
	//char	szTerminalDC[PGND_CHARLEN];
	char	szNodeAC[PGND_CHARLEN];
	char	szNodeDC[PGND_CHARLEN];
	float	fRatedPower;
	float	fMinQ;
	float	fMaxQ;
	unsigned char	nDCControlMode;
	float	fDCControlValue;
	float	fControlVac;
	float	fLossParamA;
	float	fLossParamB;
	float	fLossParamC;
	float	ri_Rerr;	//	可靠性输入数据
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	unsigned char	ri_Direction;
	float	ei_Invest;	//	经济性输入数据
	//	主接线可靠性
	unsigned char	nMCRTypeAC;
	unsigned char	nMCRTypeDC;
	float			fMCRPower;
	float	fVac;
	float	fPac;
	float	fQac;
	float	fAac;
	float	fVdc;
	float	fPdc;
	float	fAdc;
	float	fLoss;
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	float	fCalculatePac;
	float	fCalculateQac;
	short	nVoltAC;
	short	nVoltDC;
	int		nNodeAC;
	int		nNodeDC;
	int		nTopoBusAC;
	int		nTopoBusDC;
	short	nIslandAC;
	short	nIslandDC;
	short	nEdgeAC;
	short	nEdgeDC;
	unsigned char	nPStateAC;
	unsigned char	nPStateDC;
	unsigned char	nType;
	unsigned char	bOpen;
	unsigned char	bOutage;
}	DISALIGN;
typedef	struct	_PG_ACDCConverter_	tagPGACDCConverter;

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_DCDCConverter_	{
	PG_DCDCCONVERTER_RESOURCEID=0,
	PG_DCDCCONVERTER_SUBSTATION,
	PG_DCDCCONVERTER_NAME,
	PG_DCDCCONVERTER_DESC,
	PG_DCDCCONVERTER_VOLTAGELEVELI,
	PG_DCDCCONVERTER_VOLTAGELEVELJ,
	PG_DCDCCONVERTER_ECTRICTRANSFORMER,
	PG_DCDCCONVERTER_ISOLATOR,
	//PG_DCDCCONVERTER_TERMINALI,
	//PG_DCDCCONVERTER_TERMINALJ,
	PG_DCDCCONVERTER_CONNECTIVITYNODEI,
	PG_DCDCCONVERTER_CONNECTIVITYNODEJ,
	PG_DCDCCONVERTER_RATEDPOWER,
	PG_DCDCCONVERTER_CONTROLMODEI,	
	PG_DCDCCONVERTER_CONTROLVALUEI,	
	PG_DCDCCONVERTER_CONTROLMODEJ,	
	PG_DCDCCONVERTER_CONTROLVALUEJ,	
	PG_DCDCCONVERTER_LOSSPARAMA,
	PG_DCDCCONVERTER_LOSSPARAMB,
	PG_DCDCCONVERTER_LOSSPARAMC,
	PG_DCDCCONVERTER_RI_RERR,
	PG_DCDCCONVERTER_RI_TREP,
	PG_DCDCCONVERTER_RI_RCHK,
	PG_DCDCCONVERTER_RI_TCHK,
	PG_DCDCCONVERTER_RI_TFLOC,
	PG_DCDCCONVERTER_RI_DIRECTION,
	PG_DCDCCONVERTER_EI_INVEST,
	PG_DCDCCONVERTER_MCRTYPEI,
	PG_DCDCCONVERTER_MCRTYPEJ,
	PG_DCDCCONVERTER_MCRPOWER,
	PG_DCDCCONVERTER_VI,
	PG_DCDCCONVERTER_PI,
	PG_DCDCCONVERTER_AI,
	PG_DCDCCONVERTER_VJ,
	PG_DCDCCONVERTER_PJ,
	PG_DCDCCONVERTER_AJ,
	PG_DCDCCONVERTER_LOSS,
	PG_DCDCCONVERTER_RO_RCONTRIBUTION,	
	PG_DCDCCONVERTER_RO_UCONTRIBUTION,	
	PG_DCDCCONVERTER_RO_ENSCONTRIBUTION,
	PG_DCDCCONVERTER_CALCULATEPI,
	PG_DCDCCONVERTER_CALCULATEPJ,
	PG_DCDCCONVERTER_VOLTIPTR,
	PG_DCDCCONVERTER_VOLTJPTR,
	PG_DCDCCONVERTER_NODEIPTR,
	PG_DCDCCONVERTER_NODEJPTR,
	PG_DCDCCONVERTER_TOPOBUSI,
	PG_DCDCCONVERTER_TOPOBUSJ,
	PG_DCDCCONVERTER_ISLANDI,
	PG_DCDCCONVERTER_ISLANDJ,
	PG_DCDCCONVERTER_EDGEI,
	PG_DCDCCONVERTER_EDGEJ,
	PG_DCDCCONVERTER_PSTATEI,
	PG_DCDCCONVERTER_PSTATEJ,
	PG_DCDCCONVERTER_TYPE,
	PG_DCDCCONVERTER_OPEN,
	PG_DCDCCONVERTER_OUTAGE,
};
struct	_PG_DCDCConverter_	{
	char	szResID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	char	szVoltI[MDB_CHARLEN_SHORTER];
	char	szVoltJ[MDB_CHARLEN_SHORTER];
	char	szElectronicTransformer[MDB_CHARLEN];
	unsigned char	bIsolator;
	//char	szTerminalI[PGND_CHARLEN];
	//char	szTerminalJ[PGND_CHARLEN];
	char	szNodeI[PGND_CHARLEN];
	char	szNodeJ[PGND_CHARLEN];
	float	fRatedPower;
	unsigned char	nControlModeI;
	float	fControlValueI;
	unsigned char	nControlModeJ;
	float	fControlValueJ;
	float	fLossParamA;
	float	fLossParamB;
	float	fLossParamC;
	float	ri_Rerr;	//	可靠性输入数据
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	unsigned char	ri_Direction;
	float	ei_Invest;	//	经济性输入数据
	//	主接线可靠性
	unsigned char	nMCRTypeI;
	unsigned char	nMCRTypeJ;
	float			fMCRPower;
	float	fVi;
	float	fPi;
	float	fAi;
	float	fVj;
	float	fPj;
	float	fAj;
	float	fLoss;
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	float	fCalculatePI;
	float	fCalculatePJ;
	short	nVoltI;
	short	nVoltJ;
	int		nNodeI;
	int		nNodeJ;
	int		nTopoBusI;
	int		nTopoBusJ;
	short	nIslandI;
	short	nIslandJ;
	short	nEdgeI;
	short	nEdgeJ;
	unsigned char	nPStateI;
	unsigned char	nPStateJ;
	unsigned char	nType;
	unsigned char	bOpen;
	unsigned char	bOutage;
}	DISALIGN;
typedef	struct	_PG_DCDCConverter_	tagPGDCDCConverter;

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_DCBreaker_	{
	PG_DCBREAKER_RESOURCEID=0,
	PG_DCBREAKER_OBJECTID,
	PG_DCBREAKER_SUBSTATION,
	PG_DCBREAKER_VOLTAGELEVEL,
	PG_DCBREAKER_NAME,
	PG_DCBREAKER_DESC,
	//PG_DCBREAKER_ITERMINAL,
	//PG_DCBREAKER_JTERMINAL,
	PG_DCBREAKER_STATUS,
	PG_DCBREAKER_CONNECTIVITYNODEI,
	PG_DCBREAKER_CONNECTIVITYNODEJ,
	PG_DCBREAKER_RI_RERR,
	PG_DCBREAKER_RI_TREP,
	PG_DCBREAKER_RI_RCHK,
	PG_DCBREAKER_RI_TCHK,
	PG_DCBREAKER_RI_TFLOC,
	PG_DCBREAKER_RI_TSWITCH,
	PG_DCBREAKER_EI_INVEST,
	PG_DCBREAKER_P,
	PG_DCBREAKER_A,
	PG_DCBREAKER_RO_RCONTRIBUTION,	
	PG_DCBREAKER_RO_UCONTRIBUTION,	
	PG_DCBREAKER_RO_ENSCONTRIBUTION,
	PG_DCBREAKER_NODEIPTR,
	PG_DCBREAKER_NODEJPTR,
	PG_DCBREAKER_ISLAND,
	PG_DCBREAKER_EDGEI,
	PG_DCBREAKER_EDGEJ,
	PG_DCBREAKER_JOINTDEVICETYPE,
	PG_DCBREAKER_JOINTDEVICEINDEX,
	PG_DCBREAKER_OUTAGE,
};
struct	_PG_DCBreaker_	{
	char	szResID[MDB_CHARLEN];
	char	szObjID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szVolt[MDB_CHARLEN_SHORTER];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	//char	szTerminalI[PGND_CHARLEN];
	//char	szTerminalJ[PGND_CHARLEN];
	unsigned char	nStatus;
	char	szNodeI[PGND_CHARLEN];
	char	szNodeJ[PGND_CHARLEN];
	float	ri_Rerr;	//	可靠性输入数据
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	float	ri_TSwitch;
	float	ei_Invest;	//	经济性输入数据
	float	fP;
	float	fA;
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	int		nNodeI;
	int		nNodeJ;
	short	nIsland;
	short	nEdgeI;
	short	nEdgeJ;
	unsigned char	nJointDevType;
	int				nJointDevIndex;
	unsigned char	bOutage;
}	DISALIGN;
typedef	struct	_PG_DCBreaker_	tagPGDCBreaker;

//////////////////////////////////////////////////////////////////////////
enum	_PGEnum_Field_DCShortCircuitLimit_	{
	PG_DCSHORTCIRCUITLIMIT_RESOURCEID=0,
	PG_DCSHORTCIRCUITLIMIT_OBJECTID,
	PG_DCSHORTCIRCUITLIMIT_SUBSTATION,
	PG_DCSHORTCIRCUITLIMIT_VOLTAGELEVEL,
	PG_DCSHORTCIRCUITLIMIT_NAME,
	PG_DCSHORTCIRCUITLIMIT_DESC,
	//PG_DCSHORTCIRCUITLIMIT_ITERMINAL,
	//PG_DCSHORTCIRCUITLIMIT_JTERMINAL,
	PG_DCSHORTCIRCUITLIMIT_CONNECTIVITYNODEI,
	PG_DCSHORTCIRCUITLIMIT_CONNECTIVITYNODEJ,
	PG_DCSHORTCIRCUITLIMIT_R,
	PG_DCSHORTCIRCUITLIMIT_RI_RERR,
	PG_DCSHORTCIRCUITLIMIT_RI_TREP,
	PG_DCSHORTCIRCUITLIMIT_RI_RCHK,
	PG_DCSHORTCIRCUITLIMIT_RI_TCHK,
	PG_DCSHORTCIRCUITLIMIT_RI_TFLOC,
	PG_DCSHORTCIRCUITLIMIT_EI_INVEST,
	PG_DCSHORTCIRCUITLIMIT_PI,
	PG_DCSHORTCIRCUITLIMIT_PJ,
	PG_DCSHORTCIRCUITLIMIT_A,
	PG_DCSHORTCIRCUITLIMIT_LOSSP,
	PG_DCSHORTCIRCUITLIMIT_RO_RCONTRIBUTION,	
	PG_DCSHORTCIRCUITLIMIT_RO_UCONTRIBUTION,	
	PG_DCSHORTCIRCUITLIMIT_RO_ENSCONTRIBUTION,
	PG_DCSHORTCIRCUITLIMIT_NODEIPTR,
	PG_DCSHORTCIRCUITLIMIT_NODEJPTR,
	PG_DCSHORTCIRCUITLIMIT_TOPOBUSI,
	PG_DCSHORTCIRCUITLIMIT_TOPOBUSJ,
	PG_DCSHORTCIRCUITLIMIT_ISLAND,
	PG_DCSHORTCIRCUITLIMIT_EDGEI,
	PG_DCSHORTCIRCUITLIMIT_EDGEJ,
	PG_DCSHORTCIRCUITLIMIT_PROC,
	PG_DCSHORTCIRCUITLIMIT_OPEN,
	PG_DCSHORTCIRCUITLIMIT_OUTAGE,
};
struct	_PG_DCShortCircuitLimit_	{
	char	szResID[MDB_CHARLEN];
	char	szObjID[MDB_CHARLEN];
	char	szSub[MDB_CHARLEN];
	char	szVolt[MDB_CHARLEN_SHORTER];
	char	szName[MDB_CHARLEN];
	char	szDesp[MDB_CHARLEN];
	//char	szTerminalI[PGND_CHARLEN];
	//char	szTerminalJ[PGND_CHARLEN];
	char	szNodeI[PGND_CHARLEN];
	char	szNodeJ[PGND_CHARLEN];
	float	fR;
	float	ri_Rerr;//	可靠性输入数据
	float	ri_Trep;
	float	ri_Rchk;
	float	ri_Tchk;
	float	ri_Tfloc;
	float	ei_Invest;	//	经济性输入数据
	float	fPi;
	float	fPj;
	float	fA;
	float	fLoss;
	float	ro_RContribution;
	float	ro_UContribution;
	float	ro_ENSContribution;
	int		nNodeI;
	int		nNodeJ;
	int		nTopoBusI;
	int		nTopoBusJ;
	short	nIsland;
	short	nEdgeI;
	short	nEdgeJ;
	unsigned char	bProc;
	unsigned char	bOpen;
	unsigned char	bOutage;
}	DISALIGN;
typedef	struct	_PG_DCShortCircuitLimit_	tagPGDCShortCircuitLimit;
